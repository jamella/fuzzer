/*

  This is a format file for the Tavor fuzzer[https://github.com/zimmski/tavor].
  It describes the AAG ASCII format [http://fmv.jku.at/aiger/FORMAT].

  TODO it is still incomplete!
  - AND definitions have to be acyclic
  - Symbols table
  - Comments

*/

$Literal = type: Sequence,
      start: 2,
      step: 2

ExistingLiteral = 0, // false
           | 1, // true
           | $Literal.Existing,
           | ${Literal.Existing + 1} // +1 means a NOT for this input

Inputs = *(Input)
Input = $Literal.Next "\n"

Latches = *(Latch)
Latch = $Literal.Next " " ExistingLiteral "\n"

Outputs = *(Output)
Output = ExistingLiteral "\n"

Ands = *(And)
And = $Literal.Next " " ExistingLiteral " " ExistingLiteral "\n"

Header = "aag ",
         (,                                                // M
           ${Inputs.Count + Latches.Count + Ands.Count},
         | ${Inputs.Count + Latches.Count + Ands.Count + 1}, // M does not have to be exactly I + L + A there can be unused Literals
         ) " ",
         $Inputs.Count " ",                                // I
         $Latches.Count " " ,                              // L
         $Outputs.Count " ",                               // O
         $Ands.Count "\n"                                  // A

Body = Inputs,
       Latches,
       Outputs,
       Ands

START = $Literal.Reset,
        Header,
        Body
