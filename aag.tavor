/*

AAG tavor format based on http://fmv.jku.at/aiger/FORMAT

TODO
- do not allow literal AND cycles over more than one And

*/

$Literal = type: Sequence,
           start: 2,
           step: 2

ExistingLiteral = 0, // false
                | 1, // true
                | $Literal.Existing,
                | ${Literal.Existing + 1} // +1 means a NOT for this input

ExistingLiteralAnd = 0, // false
                   | 1, // true
                   | ${Literal.Existing not in (andLiteral)},
                   | ${Literal.Existing not in (andLiteral) + 1} // +1 means a NOT for this input


Inputs = *(Input)
Input = $Literal.Next "\n"

Latches = *(Latch)
Latch = $Literal.Next " " ExistingLiteral "\n"

Outputs = *(Output)
Output = ExistingLiteral "\n"

Ands = *(And)
And = $Literal.Next<andLiteral> " " ExistingLiteralAnd " " ExistingLiteralAnd "\n"

Header = "aag ",
         (,                                                  // M
           ${Inputs.Count + Latches.Count + Ands.Count},
         | ${Inputs.Count + Latches.Count + Ands.Count + 1}, // M does not have to be exactly I + L + A there can be unused Literals
         ) " ",
         $Inputs.Count " ",                                  // I
         $Latches.Count " " ,                                // L
         $Outputs.Count " ",                                 // O
         $Ands.Count "\n"                                    // A

Body = Inputs,
       Latches,
       Outputs,
       Ands

Comments = "c\n",
           *(Comment)
Comment = *([\w ]) "\n"

Symbols = +0,$Inputs.Count(SymbolInput),
          +0,$Latches.Count(SymbolLatch),
          +0,$Outputs.Count(SymbolOutput)

SymbolInput = "i" $Inputs.Unique<=e> $e.Index " " +([\w ]) "\n"
SymbolLatch = "l" $Latches.Unique<=e> $e.Index " " +([\w ]) "\n"
SymbolOutput = "o" $Outputs.Unique<=e> $e.Index " " +([\w ]) "\n"

START = $Literal.Reset,
        Header,
        Body,
        ?(Symbols),
        ?(Comments)
