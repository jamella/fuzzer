// one line comment
/*
	this comment
	can be multiple
	lines
	long
	but can be inlined too
*/
/*

Token = "Definition" 123 // Constant string and constant integer are concatenated
AnotherToken = Token // AnotherToken uses the token "Token"
MultiLineToken = "a", // token definitions can have multiple lines if at the end of a line is a ","
                 "b",
                 "c" // no "," so the definition ends here

Umläüte = "can be used since this files have to be in utf8"
Quoting = "\"this is quoted\""

Optional = ["hey i am optional!"]
Alternation = 1 | 2 | 3
Grouping = ("old" | "new") "letter"

RepeatAtLeastOnce = "repeat" +{"me"}
OptionalRepeat = "repeat me" *{"or me"}

*/
/*

Identifier attributes can be used in token definitions by prepending a "$" to their name and separate the token name from the attribute by a ".".

Letters = *{Letter}
Letter = "a" | "b" | "c"
LetterCount = $Letter.Len // LetterLen holds the count of Letter token that exist in the document

*/
/*

Special token can be defined by prepending a "$" to their name. Special token must have at least the "type" attribute.

$Number = type: Integer
Arithmetic = $Number "+" $Number

$Id = type: Sequence,
      start: 0,
      step: 2
NextId = $Id.Next // .Next indicates the next value of the sequence

*/
/*

Expressions can be used in the token definitions

Sum = ${1 + 2 + 3} // Sum will be interpreted as 6

SomeIdOrMore = $Id.Existing | ${Id.Existing + 1} // .Existing indicates an available value of the sequence in the whole document

DoubleTheCount = ${Letter.Len + Letter.Len}

*/

$Id = type: Sequence,
      start: 2,
      step: 2

Doc = Header Body

Header = ${Input.Len + Latch.Len + And.Len}, " " // M
         $Input.Len " ",                         // I
         $Latch.Len " " ,                        // L
         $Output.Len " ",                        // O
         $And.Len "\n"                           // A

Body = Inputs,
       Latches,
       Outputs,
       Ands

Inputs = *{Input}
Input  = $Id.Next "\n"

Latches = *{Latch}
Latch   = $Id.Next " " ExistingId "\n"

Outputs = *{Output}
Output  = ExistingId "\n"

Ands = *{And}
And  = $Id.Next " " ExistingId " " ExistingId "\n"

ExistingId = $Id.Existing | ${Id.Existing + 1}
